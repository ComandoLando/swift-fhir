//
//  StructureDefinitionTests.swift
//  SwiftFHIR
//
//  Generated from FHIR 1.4.0.8139 on 2016-08-17.
//  2016, SMART Health IT.
//

import XCTest
import SwiftFHIR


class StructureDefinitionTests: XCTestCase {
	
	func instantiateFrom(filename: String) throws -> SwiftFHIR.StructureDefinition {
		return instantiateFrom(json: try readJSONFile(filename))
	}
	
	func instantiateFrom(json: FHIRJSON) -> SwiftFHIR.StructureDefinition {
		let instance = SwiftFHIR.StructureDefinition(json: json)
		XCTAssertNotNil(instance, "Must have instantiated a test instance")
		return instance
	}
	
	func testStructureDefinition1() {
		do {
			let instance = try runStructureDefinition1()
			try runStructureDefinition1(instance.asJSON())
		}
		catch {
			XCTAssertTrue(false, "Must instantiate and test StructureDefinition successfully, but threw")
		}
	}
	
	@discardableResult
	func runStructureDefinition1(_ json: FHIRJSON? = nil) throws -> SwiftFHIR.StructureDefinition {
		let inst = (nil != json) ? instantiateFrom(json: json!) : try instantiateFrom(filename: "extension-structuredefinition-example.json")
		
		XCTAssertFalse(inst.abstract ?? true)
		XCTAssertEqual(inst.baseDefinition?.absoluteString, "http://hl7.org/fhir/StructureDefinition/Extension")
		XCTAssertEqual(inst.baseType, "Extension")
		XCTAssertEqual(inst.contact?[0].telecom?[0].system, "other")
		XCTAssertEqual(inst.contact?[0].telecom?[0].value, "http://hl7.org/special/committees/FHIR")
		XCTAssertEqual(inst.context?[0], "ElementDefinition")
		XCTAssertEqual(inst.contextType, "datatype")
		XCTAssertEqual(inst.date?.description, "2014-01-31")
		XCTAssertEqual(inst.derivation, "constraint")
		XCTAssertEqual(inst.description_fhir, "An additional example value.")
		XCTAssertEqual(inst.differential?.element?[0].definition, "An additional example value.")
		XCTAssertEqual(inst.differential?.element?[0].max, "*")
		XCTAssertEqual(inst.differential?.element?[0].min, 0)
		XCTAssertEqual(inst.differential?.element?[0].path, "Extension")
		XCTAssertEqual(inst.differential?.element?[0].short, "An additional example value")
		XCTAssertEqual(inst.differential?.element?[0].type?[0].code, "Extension")
		XCTAssertEqual(inst.differential?.element?[1].definition, "Key for this example.")
		XCTAssertEqual(inst.differential?.element?[1].max, "1")
		XCTAssertEqual(inst.differential?.element?[1].min, 1)
		XCTAssertEqual(inst.differential?.element?[1].name, "index")
		XCTAssertEqual(inst.differential?.element?[1].path, "Extension.extension")
		XCTAssertEqual(inst.differential?.element?[1].short, "Key for this example")
		XCTAssertEqual(inst.differential?.element?[1].type?[0].code, "Extension")
		XCTAssertEqual(inst.differential?.element?[2].max, "0")
		XCTAssertEqual(inst.differential?.element?[2].name, "extension")
		XCTAssertEqual(inst.differential?.element?[2].path, "Extension.extension.extension")
		XCTAssertEqual(inst.differential?.element?[3].fixedUri?.absoluteString, "index")
		XCTAssertEqual(inst.differential?.element?[3].path, "Extension.extension.url")
		XCTAssertEqual(inst.differential?.element?[3].type?[0].code, "uri")
		XCTAssertEqual(inst.differential?.element?[4].min, 1)
		XCTAssertEqual(inst.differential?.element?[4].path, "Extension.extension.value[x]")
		XCTAssertEqual(inst.differential?.element?[4].type?[0].code, "string")
		XCTAssertEqual(inst.differential?.element?[5].definition, "Value of the example.")
		XCTAssertEqual(inst.differential?.element?[5].max, "1")
		XCTAssertEqual(inst.differential?.element?[5].min, 0)
		XCTAssertEqual(inst.differential?.element?[5].name, "exValue")
		XCTAssertEqual(inst.differential?.element?[5].path, "Extension.extension")
		XCTAssertEqual(inst.differential?.element?[5].short, "Value of the example")
		XCTAssertEqual(inst.differential?.element?[5].type?[0].code, "Extension")
		XCTAssertEqual(inst.differential?.element?[6].max, "0")
		XCTAssertEqual(inst.differential?.element?[6].name, "extension")
		XCTAssertEqual(inst.differential?.element?[6].path, "Extension.extension.extension")
		XCTAssertEqual(inst.differential?.element?[7].fixedUri?.absoluteString, "exValue")
		XCTAssertEqual(inst.differential?.element?[7].path, "Extension.extension.url")
		XCTAssertEqual(inst.differential?.element?[7].type?[0].code, "uri")
		XCTAssertEqual(inst.differential?.element?[8].min, 1)
		XCTAssertEqual(inst.differential?.element?[8].path, "Extension.extension.value[x]")
		XCTAssertEqual(inst.differential?.element?[8].type?[0].code, "boolean")
		XCTAssertEqual(inst.differential?.element?[8].type?[1].code, "integer")
		XCTAssertEqual(inst.differential?.element?[8].type?[2].code, "decimal")
		XCTAssertEqual(inst.differential?.element?[8].type?[3].code, "base64Binary")
		XCTAssertEqual(inst.differential?.element?[8].type?[4].code, "instant")
		XCTAssertEqual(inst.differential?.element?[8].type?[5].code, "string")
		XCTAssertEqual(inst.differential?.element?[8].type?[6].code, "uri")
		XCTAssertEqual(inst.differential?.element?[8].type?[7].code, "date")
		XCTAssertEqual(inst.differential?.element?[8].type?[8].code, "dateTime")
		XCTAssertEqual(inst.differential?.element?[8].type?[9].code, "time")
		XCTAssertEqual(inst.differential?.element?[9].fixedUri?.absoluteString, "http://hl7.org/fhir/StructureDefinition/structuredefinition-example")
		XCTAssertEqual(inst.differential?.element?[9].path, "Extension.url")
		XCTAssertEqual(inst.differential?.element?[9].type?[0].code, "uri")
		XCTAssertEqual(inst.display, "example")
		XCTAssertEqual(inst.fhirVersion, "1.4.0")
		XCTAssertEqual(inst.id, "structuredefinition-example")
		XCTAssertEqual(inst.kind, "datatype")
		XCTAssertEqual(inst.name, "An additional example value")
		XCTAssertEqual(inst.publisher, "Health Level Seven, Inc. - [WG Name] WG")
		XCTAssertEqual(inst.snapshot?.element?[0].base?.max, "*")
		XCTAssertEqual(inst.snapshot?.element?[0].base?.min, 0)
		XCTAssertEqual(inst.snapshot?.element?[0].base?.path, "Extension")
		XCTAssertEqual(inst.snapshot?.element?[0].definition, "An additional example value.")
		XCTAssertEqual(inst.snapshot?.element?[0].max, "*")
		XCTAssertEqual(inst.snapshot?.element?[0].min, 0)
		XCTAssertEqual(inst.snapshot?.element?[0].path, "Extension")
		XCTAssertEqual(inst.snapshot?.element?[0].short, "An additional example value")
		XCTAssertEqual(inst.snapshot?.element?[0].type?[0].code, "Extension")
		XCTAssertEqual(inst.snapshot?.element?[1].base?.max, "*")
		XCTAssertEqual(inst.snapshot?.element?[1].base?.min, 0)
		XCTAssertEqual(inst.snapshot?.element?[1].base?.path, "Element.id")
		XCTAssertEqual(inst.snapshot?.element?[1].definition, "unique id for the element within a resource (for internal references).")
		XCTAssertEqual(inst.snapshot?.element?[1].mapping?[0].identity, "rim")
		XCTAssertEqual(inst.snapshot?.element?[1].mapping?[0].map, "n/a")
		XCTAssertEqual(inst.snapshot?.element?[1].max, "1")
		XCTAssertEqual(inst.snapshot?.element?[1].min, 0)
		XCTAssertEqual(inst.snapshot?.element?[1].path, "Extension.id")
		XCTAssertEqual(inst.snapshot?.element?[1].representation?[0], "xmlAttr")
		XCTAssertEqual(inst.snapshot?.element?[1].short, "xml:id (or equivalent in JSON)")
		XCTAssertEqual(inst.snapshot?.element?[1].type?[0].code, "id")
		XCTAssertEqual(inst.snapshot?.element?[2].base?.max, "*")
		XCTAssertEqual(inst.snapshot?.element?[2].base?.min, 0)
		XCTAssertEqual(inst.snapshot?.element?[2].base?.path, "Element.extension")
		XCTAssertEqual(inst.snapshot?.element?[2].definition, "An Extension")
		XCTAssertEqual(inst.snapshot?.element?[2].max, "*")
		XCTAssertEqual(inst.snapshot?.element?[2].min, 0)
		XCTAssertEqual(inst.snapshot?.element?[2].path, "Extension.extension")
		XCTAssertEqual(inst.snapshot?.element?[2].short, "Extension")
		XCTAssertEqual(inst.snapshot?.element?[2].slicing?.discriminator?[0], "url")
		XCTAssertFalse(inst.snapshot?.element?[2].slicing?.ordered ?? true)
		XCTAssertEqual(inst.snapshot?.element?[2].slicing?.rules, "open")
		XCTAssertEqual(inst.snapshot?.element?[2].type?[0].code, "Extension")
		XCTAssertEqual(inst.snapshot?.element?[3].base?.max, "*")
		XCTAssertEqual(inst.snapshot?.element?[3].base?.min, 0)
		XCTAssertEqual(inst.snapshot?.element?[3].base?.path, "Element.extension")
		XCTAssertEqual(inst.snapshot?.element?[3].definition, "Key for this example.")
		XCTAssertEqual(inst.snapshot?.element?[3].max, "1")
		XCTAssertEqual(inst.snapshot?.element?[3].min, 1)
		XCTAssertEqual(inst.snapshot?.element?[3].name, "index")
		XCTAssertEqual(inst.snapshot?.element?[3].path, "Extension.extension")
		XCTAssertEqual(inst.snapshot?.element?[3].short, "Key for this example")
		XCTAssertEqual(inst.snapshot?.element?[3].type?[0].code, "Extension")
		XCTAssertEqual(inst.snapshot?.element?[4].base?.max, "*")
		XCTAssertEqual(inst.snapshot?.element?[4].base?.min, 0)
		XCTAssertEqual(inst.snapshot?.element?[4].base?.path, "Element.id")
		XCTAssertEqual(inst.snapshot?.element?[4].definition, "unique id for the element within a resource (for internal references).")
		XCTAssertEqual(inst.snapshot?.element?[4].mapping?[0].identity, "rim")
		XCTAssertEqual(inst.snapshot?.element?[4].mapping?[0].map, "n/a")
		XCTAssertEqual(inst.snapshot?.element?[4].max, "1")
		XCTAssertEqual(inst.snapshot?.element?[4].min, 0)
		XCTAssertEqual(inst.snapshot?.element?[4].path, "Extension.extension.id")
		XCTAssertEqual(inst.snapshot?.element?[4].representation?[0], "xmlAttr")
		XCTAssertEqual(inst.snapshot?.element?[4].short, "xml:id (or equivalent in JSON)")
		XCTAssertEqual(inst.snapshot?.element?[4].type?[0].code, "id")
		XCTAssertEqual(inst.snapshot?.element?[5].base?.max, "*")
		XCTAssertEqual(inst.snapshot?.element?[5].base?.min, 0)
		XCTAssertEqual(inst.snapshot?.element?[5].base?.path, "Element.extension")
		XCTAssertEqual(inst.snapshot?.element?[5].definition, "An Extension")
		XCTAssertEqual(inst.snapshot?.element?[5].max, "0")
		XCTAssertEqual(inst.snapshot?.element?[5].min, 0)
		XCTAssertEqual(inst.snapshot?.element?[5].name, "extension")
		XCTAssertEqual(inst.snapshot?.element?[5].path, "Extension.extension.extension")
		XCTAssertEqual(inst.snapshot?.element?[5].short, "Extension")
		XCTAssertEqual(inst.snapshot?.element?[5].type?[0].code, "Extension")
		XCTAssertEqual(inst.snapshot?.element?[6].base?.max, "1")
		XCTAssertEqual(inst.snapshot?.element?[6].base?.min, 1)
		XCTAssertEqual(inst.snapshot?.element?[6].base?.path, "Extension.url")
		XCTAssertEqual(inst.snapshot?.element?[6].definition, "Source of the definition for the extension code - a logical name or a URL.")
		XCTAssertEqual(inst.snapshot?.element?[6].fixedUri?.absoluteString, "index")
		XCTAssertEqual(inst.snapshot?.element?[6].mapping?[0].identity, "rim")
		XCTAssertEqual(inst.snapshot?.element?[6].mapping?[0].map, "N/A")
		XCTAssertEqual(inst.snapshot?.element?[6].max, "1")
		XCTAssertEqual(inst.snapshot?.element?[6].min, 1)
		XCTAssertEqual(inst.snapshot?.element?[6].path, "Extension.extension.url")
		XCTAssertEqual(inst.snapshot?.element?[6].representation?[0], "xmlAttr")
		XCTAssertEqual(inst.snapshot?.element?[6].short, "identifies the meaning of the extension")
		XCTAssertEqual(inst.snapshot?.element?[6].type?[0].code, "uri")
		XCTAssertEqual(inst.snapshot?.element?[7].base?.max, "1")
		XCTAssertEqual(inst.snapshot?.element?[7].base?.min, 0)
		XCTAssertEqual(inst.snapshot?.element?[7].base?.path, "Extension.value[x]")
		XCTAssertEqual(inst.snapshot?.element?[7].definition, "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).")
		XCTAssertEqual(inst.snapshot?.element?[7].mapping?[0].identity, "rim")
		XCTAssertEqual(inst.snapshot?.element?[7].mapping?[0].map, "N/A")
		XCTAssertEqual(inst.snapshot?.element?[7].max, "1")
		XCTAssertEqual(inst.snapshot?.element?[7].min, 1)
		XCTAssertEqual(inst.snapshot?.element?[7].path, "Extension.extension.valueString")
		XCTAssertEqual(inst.snapshot?.element?[7].short, "Value of extension")
		XCTAssertEqual(inst.snapshot?.element?[7].type?[0].code, "string")
		XCTAssertEqual(inst.snapshot?.element?[8].base?.max, "*")
		XCTAssertEqual(inst.snapshot?.element?[8].base?.min, 0)
		XCTAssertEqual(inst.snapshot?.element?[8].base?.path, "Element.extension")
		XCTAssertEqual(inst.snapshot?.element?[8].definition, "Value of the example.")
		XCTAssertEqual(inst.snapshot?.element?[8].max, "1")
		XCTAssertEqual(inst.snapshot?.element?[8].min, 0)
		XCTAssertEqual(inst.snapshot?.element?[8].name, "exValue")
		XCTAssertEqual(inst.snapshot?.element?[8].path, "Extension.extension")
		XCTAssertEqual(inst.snapshot?.element?[8].short, "Value of the example")
		XCTAssertEqual(inst.snapshot?.element?[8].type?[0].code, "Extension")
		XCTAssertEqual(inst.snapshot?.element?[9].base?.max, "*")
		XCTAssertEqual(inst.snapshot?.element?[9].base?.min, 0)
		XCTAssertEqual(inst.snapshot?.element?[9].base?.path, "Element.id")
		XCTAssertEqual(inst.snapshot?.element?[9].definition, "unique id for the element within a resource (for internal references).")
		XCTAssertEqual(inst.snapshot?.element?[9].mapping?[0].identity, "rim")
		XCTAssertEqual(inst.snapshot?.element?[9].mapping?[0].map, "n/a")
		XCTAssertEqual(inst.snapshot?.element?[9].max, "1")
		XCTAssertEqual(inst.snapshot?.element?[9].min, 0)
		XCTAssertEqual(inst.snapshot?.element?[9].path, "Extension.extension.id")
		XCTAssertEqual(inst.snapshot?.element?[9].representation?[0], "xmlAttr")
		XCTAssertEqual(inst.snapshot?.element?[9].short, "xml:id (or equivalent in JSON)")
		XCTAssertEqual(inst.snapshot?.element?[9].type?[0].code, "id")
		XCTAssertEqual(inst.status, "draft")
		XCTAssertEqual(inst.url?.absoluteString, "http://hl7.org/fhir/StructureDefinition/structuredefinition-example")
		
		return inst
	}
	
	func testStructureDefinition2() {
		do {
			let instance = try runStructureDefinition2()
			try runStructureDefinition2(instance.asJSON())
		}
		catch {
			XCTAssertTrue(false, "Must instantiate and test StructureDefinition successfully, but threw")
		}
	}
	
	@discardableResult
	func runStructureDefinition2(_ json: FHIRJSON? = nil) throws -> SwiftFHIR.StructureDefinition {
		let inst = (nil != json) ? instantiateFrom(json: json!) : try instantiateFrom(filename: "structuredefinition-example.json")
		
		XCTAssertFalse(inst.abstract ?? true)
		XCTAssertEqual(inst.baseDefinition?.absoluteString, "http://hl7.org/fhir/StructureDefinition/DiagnosticReport")
		XCTAssertEqual(inst.baseType, "DiagnosticReport")
		XCTAssertEqual(inst.code?[0].code, "314079002")
		XCTAssertEqual(inst.code?[0].display, "314079002")
		XCTAssertEqual(inst.code?[0].system?.absoluteString, "http://snomed.info/sct")
		XCTAssertEqual(inst.contact?[0].name, "Grahame Grieve")
		XCTAssertEqual(inst.contact?[0].telecom?[0].system, "email")
		XCTAssertEqual(inst.contact?[0].telecom?[0].value, "grahame@healthintersections.com.au")
		XCTAssertEqual(inst.copyright, "Createive Commons 0, per FHIR specification")
		XCTAssertEqual(inst.date?.description, "2012-05-12")
		XCTAssertEqual(inst.derivation, "constraint")
		XCTAssertEqual(inst.description_fhir, "Describes how the lab report is used for a standard Lipid Profile - Cholesterol, Triglyceride and Cholesterol fractions. Uses LOINC codes")
		XCTAssertEqual(inst.display, "Example Lipid Profile")
		XCTAssertTrue(inst.experimental ?? false)
		XCTAssertEqual(inst.fhirVersion, "1.0.0")
		XCTAssertEqual(inst.id, "example")
		XCTAssertEqual(inst.identifier?[0].system?.absoluteString, "urn:ietf:rfc:3986")
		XCTAssertEqual(inst.identifier?[0].value, "1.2.36.90146595217.4.2")
		XCTAssertEqual(inst.kind, "resource")
		XCTAssertEqual(inst.mapping?[0].comments, "Actual mappings haven't yet been filled out")
		XCTAssertEqual(inst.mapping?[0].identity, "m1")
		XCTAssertEqual(inst.mapping?[0].name, "RCPA Lipid Report recommendations")
		XCTAssertEqual(inst.mapping?[0].uri?.absoluteString, "https://www.rcpa.edu.au/getattachment/0961c6d1-ec80-4500-8dc0-de516500e05b/Lipid-and-lipoprotein-testing.aspx")
		XCTAssertEqual(inst.name, "Example Lipid Profile")
		XCTAssertEqual(inst.publisher, "Health Intersections Pty Ltd")
		XCTAssertEqual(inst.requirements, "Provide an example to demonstrate how to use StructureDefinition")
		XCTAssertEqual(inst.snapshot?.element?[0].base?.max, "1")
		XCTAssertEqual(inst.snapshot?.element?[0].base?.min, 1)
		XCTAssertEqual(inst.snapshot?.element?[0].base?.path, "DiagnosticReport")
		XCTAssertEqual(inst.snapshot?.element?[0].definition, "The findings and interpretation of a general lipd lab profile.")
		XCTAssertFalse(inst.snapshot?.element?[0].isModifier ?? true)
		XCTAssertEqual(inst.snapshot?.element?[0].max, "1")
		XCTAssertEqual(inst.snapshot?.element?[0].min, 1)
		XCTAssertEqual(inst.snapshot?.element?[0].name, "LipidProfile")
		XCTAssertEqual(inst.snapshot?.element?[0].path, "DiagnosticReport")
		XCTAssertEqual(inst.snapshot?.element?[0].short, "Lipid Lab Report")
		XCTAssertEqual(inst.snapshot?.element?[0].type?[0].code, "Resource")
		XCTAssertEqual(inst.snapshot?.element?[1].base?.max, "*")
		XCTAssertEqual(inst.snapshot?.element?[1].base?.min, 0)
		XCTAssertEqual(inst.snapshot?.element?[1].base?.path, "DiagnosticReport.extension")
		XCTAssertFalse(inst.snapshot?.element?[1].isModifier ?? true)
		XCTAssertEqual(inst.snapshot?.element?[1].max, "*")
		XCTAssertEqual(inst.snapshot?.element?[1].min, 0)
		XCTAssertEqual(inst.snapshot?.element?[1].path, "DiagnosticReport.extension")
		XCTAssertEqual(inst.snapshot?.element?[1].short, "Additional Content defined by implementations")
		XCTAssertEqual(inst.snapshot?.element?[1].slicing?.discriminator?[0], "url")
		XCTAssertFalse(inst.snapshot?.element?[1].slicing?.ordered ?? true)
		XCTAssertEqual(inst.snapshot?.element?[1].slicing?.rules, "open")
		XCTAssertEqual(inst.snapshot?.element?[1].type?[0].code, "Extension")
		XCTAssertEqual(inst.snapshot?.element?[2].alias?[0], "narrative")
		XCTAssertEqual(inst.snapshot?.element?[2].alias?[1], "html")
		XCTAssertEqual(inst.snapshot?.element?[2].alias?[2], "xhtml")
		XCTAssertEqual(inst.snapshot?.element?[2].alias?[3], "display")
		XCTAssertEqual(inst.snapshot?.element?[2].base?.max, "1")
		XCTAssertEqual(inst.snapshot?.element?[2].base?.min, 0)
		XCTAssertEqual(inst.snapshot?.element?[2].base?.path, "DiagnosticReport.text")
		XCTAssertEqual(inst.snapshot?.element?[2].comments, "Contained resources do not have narrative. Resources that are not contained SHOULD have a narrative.")
		XCTAssertFalse(inst.snapshot?.element?[2].isModifier ?? true)
		XCTAssertEqual(inst.snapshot?.element?[2].max, "1")
		XCTAssertEqual(inst.snapshot?.element?[2].min, 0)
		XCTAssertEqual(inst.snapshot?.element?[2].path, "DiagnosticReport.text")
		XCTAssertEqual(inst.snapshot?.element?[2].short, "Text summary of the resource, for human interpretation")
		XCTAssertEqual(inst.snapshot?.element?[2].type?[0].code, "Narrative")
		XCTAssertEqual(inst.snapshot?.element?[3].alias?[0], "inline resources")
		XCTAssertEqual(inst.snapshot?.element?[3].alias?[1], "anonymous resources")
		XCTAssertEqual(inst.snapshot?.element?[3].alias?[2], "contained resources")
		XCTAssertEqual(inst.snapshot?.element?[3].base?.max, "*")
		XCTAssertEqual(inst.snapshot?.element?[3].base?.min, 0)
		XCTAssertEqual(inst.snapshot?.element?[3].base?.path, "DiagnosticReport.contained")
		XCTAssertEqual(inst.snapshot?.element?[3].comments, "This should never be done when the content can be identified properly, as once identification is lost, it is extremely difficult (and context dependent) to restore it again.")
		XCTAssertFalse(inst.snapshot?.element?[3].isModifier ?? true)
		XCTAssertEqual(inst.snapshot?.element?[3].max, "*")
		XCTAssertEqual(inst.snapshot?.element?[3].min, 0)
		XCTAssertEqual(inst.snapshot?.element?[3].path, "DiagnosticReport.contained")
		XCTAssertEqual(inst.snapshot?.element?[3].short, "Contained, inline Resources")
		XCTAssertEqual(inst.snapshot?.element?[3].type?[0].code, "Resource")
		XCTAssertEqual(inst.snapshot?.element?[4].base?.max, "1")
		XCTAssertEqual(inst.snapshot?.element?[4].base?.min, 1)
		XCTAssertEqual(inst.snapshot?.element?[4].base?.path, "DiagnosticReport.status")
		XCTAssertEqual(inst.snapshot?.element?[4].binding?.strength, "required")
		XCTAssertEqual(inst.snapshot?.element?[4].binding?.valueSetReference?.reference, "http://hl7.org/fhir/ValueSet/observation-status")
		XCTAssertEqual(inst.snapshot?.element?[4].comments, "This is labeled as \"Is Modifier\" because applications need to take appropriate action if a report is withdrawn.")
		XCTAssertEqual(inst.snapshot?.element?[4].definition, "The status of the diagnostic report as a whole.")
		XCTAssertFalse(inst.snapshot?.element?[4].isModifier ?? true)
		XCTAssertEqual(inst.snapshot?.element?[4].max, "1")
		XCTAssertEqual(inst.snapshot?.element?[4].min, 1)
		XCTAssertEqual(inst.snapshot?.element?[4].path, "DiagnosticReport.status")
		XCTAssertEqual(inst.snapshot?.element?[4].short, "registered|interim|final|amended|cancelled|withdrawn")
		XCTAssertEqual(inst.snapshot?.element?[4].type?[0].code, "code")
		XCTAssertEqual(inst.snapshot?.element?[5].base?.max, "1")
		XCTAssertEqual(inst.snapshot?.element?[5].base?.min, 1)
		XCTAssertEqual(inst.snapshot?.element?[5].base?.path, "DiagnosticReport.issued")
		XCTAssertEqual(inst.snapshot?.element?[5].comments, "May be different from the update time of the resource itself, because that is the status of the record (potentially a secondary copy), not the actual release time of the report.")
		XCTAssertEqual(inst.snapshot?.element?[5].definition, "The date and/or time that this version of the report was released from the source diagnostic service.")
		XCTAssertFalse(inst.snapshot?.element?[5].isModifier ?? true)
		XCTAssertEqual(inst.snapshot?.element?[5].max, "1")
		XCTAssertEqual(inst.snapshot?.element?[5].min, 1)
		XCTAssertEqual(inst.snapshot?.element?[5].path, "DiagnosticReport.issued")
		XCTAssertEqual(inst.snapshot?.element?[5].short, "Date this version was released")
		XCTAssertEqual(inst.snapshot?.element?[5].type?[0].code, "dateTime")
		XCTAssertEqual(inst.snapshot?.element?[6].base?.max, "1")
		XCTAssertEqual(inst.snapshot?.element?[6].base?.min, 1)
		XCTAssertEqual(inst.snapshot?.element?[6].base?.path, "DiagnosticReport.subject")
		XCTAssertEqual(inst.snapshot?.element?[6].definition, "The subject of the report. Usually, but not always, this is a patient. However diagnostic services also perform analyses on specimens collected from a variety of other sources.")
		XCTAssertFalse(inst.snapshot?.element?[6].isModifier ?? true)
		XCTAssertEqual(inst.snapshot?.element?[6].max, "1")
		XCTAssertEqual(inst.snapshot?.element?[6].min, 1)
		XCTAssertEqual(inst.snapshot?.element?[6].path, "DiagnosticReport.subject")
		XCTAssertEqual(inst.snapshot?.element?[6].short, "The subject of the report")
		XCTAssertEqual(inst.snapshot?.element?[6].type?[0].code, "Reference")
		XCTAssertEqual(inst.snapshot?.element?[6].type?[0].profile?[0].absoluteString, "http://hl7.org/fhir/StructureDefinition/Patient")
		XCTAssertEqual(inst.snapshot?.element?[6].type?[1].code, "Reference")
		XCTAssertEqual(inst.snapshot?.element?[6].type?[1].profile?[0].absoluteString, "http://hl7.org/fhir/StructureDefinition/Group")
		XCTAssertEqual(inst.snapshot?.element?[6].type?[2].code, "Reference")
		XCTAssertEqual(inst.snapshot?.element?[6].type?[2].profile?[0].absoluteString, "http://hl7.org/fhir/StructureDefinition/Device")
		XCTAssertEqual(inst.snapshot?.element?[7].base?.max, "1")
		XCTAssertEqual(inst.snapshot?.element?[7].base?.min, 1)
		XCTAssertEqual(inst.snapshot?.element?[7].base?.path, "DiagnosticReport.performer")
		XCTAssertEqual(inst.snapshot?.element?[7].comments, "This is not necessarily the source of the atomic data items - it's the entity that takes responsibility for the clinical report.")
		XCTAssertEqual(inst.snapshot?.element?[7].definition, "The diagnostic service that is responsible for issuing the report.")
		XCTAssertFalse(inst.snapshot?.element?[7].isModifier ?? true)
		XCTAssertEqual(inst.snapshot?.element?[7].max, "1")
		XCTAssertEqual(inst.snapshot?.element?[7].min, 1)
		XCTAssertEqual(inst.snapshot?.element?[7].path, "DiagnosticReport.performer")
		XCTAssertEqual(inst.snapshot?.element?[7].short, "Responsible Diagnostic Service")
		XCTAssertEqual(inst.snapshot?.element?[7].type?[0].code, "Reference")
		XCTAssertEqual(inst.snapshot?.element?[7].type?[0].profile?[0].absoluteString, "http://hl7.org/fhir/StructureDefinition/Observation")
		XCTAssertEqual(inst.snapshot?.element?[8].base?.max, "*")
		XCTAssertEqual(inst.snapshot?.element?[8].base?.min, 0)
		XCTAssertEqual(inst.snapshot?.element?[8].base?.path, "DiagnosticReport.identifier")
		XCTAssertEqual(inst.snapshot?.element?[8].definition, "The local ID assigned to the report by the order filler, usually by the Information System of the diagnostic service provider.")
		XCTAssertFalse(inst.snapshot?.element?[8].isModifier ?? true)
		XCTAssertEqual(inst.snapshot?.element?[8].max, "1")
		XCTAssertEqual(inst.snapshot?.element?[8].min, 0)
		XCTAssertEqual(inst.snapshot?.element?[8].path, "DiagnosticReport.identifier")
		XCTAssertEqual(inst.snapshot?.element?[8].short, "Id for external references to this report")
		XCTAssertEqual(inst.snapshot?.element?[8].type?[0].code, "Identifier")
		XCTAssertEqual(inst.snapshot?.element?[9].base?.max, "*")
		XCTAssertEqual(inst.snapshot?.element?[9].base?.min, 0)
		XCTAssertEqual(inst.snapshot?.element?[9].base?.path, "DiagnosticReport.request")
		XCTAssertEqual(inst.snapshot?.element?[9].definition, "Details concerning a single pathology test requested.")
		XCTAssertFalse(inst.snapshot?.element?[9].isModifier ?? true)
		XCTAssertEqual(inst.snapshot?.element?[9].max, "*")
		XCTAssertEqual(inst.snapshot?.element?[9].min, 0)
		XCTAssertEqual(inst.snapshot?.element?[9].path, "DiagnosticReport.request")
		XCTAssertEqual(inst.snapshot?.element?[9].short, "What was requested")
		XCTAssertEqual(inst.snapshot?.element?[9].type?[0].code, "Reference")
		XCTAssertEqual(inst.snapshot?.element?[9].type?[0].profile?[0].absoluteString, "http://hl7.org/fhir/StructureDefinition/DiagnosticOrder")
		XCTAssertEqual(inst.status, "draft")
		XCTAssertEqual(inst.text?.status, "generated")
		XCTAssertEqual(inst.url?.absoluteString, "http://hl7.org/fhir/StructureDefinition/example")
		XCTAssertEqual(inst.useContext?[0].coding?[0].code, "AU")
		XCTAssertEqual(inst.useContext?[0].coding?[0].system?.absoluteString, "urn:iso:std:iso:3166")
		XCTAssertEqual(inst.version, "2")
		
		return inst
	}
}
